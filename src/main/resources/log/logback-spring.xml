<?xml version="1.0" encoding="UTF-8"?>
<!--
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
scan="false" scanPeriod="60 seconds" debug="false"
-->
<configuration
        xmlns="http://ch.qos.logback/xml/ns/logback"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://ch.qos.logback/xml/ns/logback https://raw.githubusercontent.com/enricopulatzo/logback-XSD/master/src/main/xsd/logback.xsd"
        scan="true"
>
    <!--注册转换器，颜色转化器-->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>


    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <!-- 定义日志的根目录 -->
    <property name="log_path" value="./web-log/" />
    <!-- 定义日志文件后缀 -->
    <property name="log_suffix" value=".txt" />
    <!-- 定义文件滚动大小 MB/KB-->
    <property name="maxFileSize" value="50MB"/>
    <!--定义需要保存几天的文件-->
    <property name="maxHistory" value="15"/>

    <!-- 定义日志文件名称 -->
    <property name="WARN" value="warn"/>
    <property name="ERROR" value="error"/>
    <property name="INFO" value="info"/>
    <property name="SqlLog" value="sqlLog"/>

    <!--定义 pattern-->
    <property name="patterns" value="|->%d{yyyy-MM-dd HH:mm:ss.SSS} |-> %thread |-> %-5level |-> %c - %L |->  %msg %n"/>
    <!--控制台-彩色-->
    <property name="pattern" value="
            |->${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} |-> %thread |-> %-5level |-> %c - %L |->  %msg
              %clr([%15.15t]){faint}
              %clr([%3L]){blue}
              %clr(%-40.40logger{39}){cyan}
              %clr(:){faint}
              %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}
            %n
            }"/>


    <property name="CONSOLE_LOG_PATTERN"
              value="
              ${
              CONSOLE_LOG_PATTERN:
              -%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint}
              %clr(${LOG_LEVEL_PATTERN:-%5p})
               %clr(${PID:- }){magenta}
               %clr(-){faint}
               %clr([%15.15t]){faint}
              %clr([%3L]){blue}
              %clr(%-40.40logger{39}){cyan}
              %clr(:){faint}
              %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}
              }"/>

    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!--
            日志输出格式：%d表示日期时间，%thread表示线程名，%-5level：级别从左显示5个字符宽度
            %logger{50} 表示logger名字最长50个字符，否则按照句点分割。 %msg：日志消息，%n是换行符
            -->
            <pattern>${pattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY </onMismatch>
        </filter>
        <!--
        当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${log_path}%d{yyyyMMdd}/%i-${WARN}${log_suffix}</FileNamePattern>
            <MaxHistory>${maxHistory}</MaxHistory>
            <!--
             当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy
             -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${maxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>

    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY </onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${log_path}%d{yyyyMMdd}/%i-${ERROR}${log_suffix}</FileNamePattern>
            <MaxHistory>${maxHistory}</MaxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${maxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>


    <appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY </onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${log_path}%d{yyyyMMdd}/%i-${INFO}${log_suffix}</FileNamePattern>
            <MaxHistory>${maxHistory}</MaxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${maxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>

    <property name="sqlLogpattern" value="|->%d{yyyy-MM-dd HH:mm:ss.SSS} |-> %c - %L |->  %msg %n"/>

    <appender name="sqlLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY </onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${log_path}%d{yyyyMMdd}/%i-${SqlLog}${log_suffix}</FileNamePattern>
            <MaxHistory>${maxHistory}</MaxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${maxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>${sqlLogpattern}</pattern>
        </encoder>
    </appender>

    <!--
      logger主要用于存放日志对象，也可以定义日志类型、级别
      name：表示匹配的logger类型前缀，也就是包的前半部分
      level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
      additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，false：表示只用当前logger的appender-ref，true：表示当前logger的appender-ref和rootLogger的appender-ref都有效
      -->
    <logger name="com.mer.project.Dao" level="DEBUG" additivity="true">
        <appender-ref ref="sqlLog" />
    </logger>

    <!--
    root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。
    -->
    <root level="INFO">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ERROR"/>
        <appender-ref ref="WARN"/>
        <appender-ref ref="INFO"/>
    </root>

</configuration>