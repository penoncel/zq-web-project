<?xml version="1.0" encoding="UTF-8"?>
<!--
scan：      当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：     当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。

scan="false" scanPeriod="60 seconds" debug="false"
-->
<configuration scan="true" scanPeriod="5 seconds" debug="false">

    <!-- 定义日志的根目录 -->
    <property name="log_path" value="./web-log/" />
    <!-- 定义日志文件后缀 -->
    <property name="log_suffix" value=".log" />
    <!-- 定义文件滚动大小 MB/KB-->
    <property name="maxFileSize" value="10MB"/>
    <!--定义需要保存几天的文件-->
    <property name="maxHistory" value="15"/>
    <!--定义 pattern 输出格式-->
    <property name="pattern" value="[%d{HH:mm:ss.SSS}] [%thread] [%-5level] [%-40.40logger{39}] [%4L] %msg %n"/>


    <!--输出到控制台-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${pattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>


    <!--输出到文件-->
    <!-- 时间滚动输出 level为 DEBUG 日志 -->
    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 此日志文件只记录 debug 级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <!-- 当将要打印的日志级别符合<level></level>中定义的级别时，就输出 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 当将要打印的日志级别不符合<level></level>中定义的级别时，会拒绝输出。如在代码中有一行这样的日志 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <FileNamePattern>${log_path}%d{yyyyMMdd}/%d{HH}/log-debug.%i${log_suffix}</FileNamePattern>
            <!-- 日志文件保留天数-->
            <MaxHistory>${maxHistory}</MaxHistory>
            <!-- 日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${maxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>[%d{HH:mm:ss.SSS}]-> %msg %n </pattern>
        </encoder>
    </appender>

    <!-- 时间滚动输出 level为 INFO 日志 -->
    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 此日志文件只记录 info 级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY </onMismatch>
        </filter>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <FileNamePattern>${log_path}%d{yyyyMMdd}/%d{HH}/log-info.%i${log_suffix}</FileNamePattern>
            <!-- 日志文件保留天数-->
            <MaxHistory>${maxHistory}</MaxHistory>
            <!-- 日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${maxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>

    <!-- 时间滚动输出 level为 WARN 日志 -->
    <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 此日志文件只记录 warn 级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY </onMismatch>
        </filter>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <FileNamePattern>${log_path}%d{yyyyMMdd}/%d{HH}/log-warn.%i${log_suffix}</FileNamePattern>
            <!-- 日志文件保留天数-->
            <MaxHistory>${maxHistory}</MaxHistory>
            <!-- 日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${maxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>

    <!-- 时间滚动输出 level为 ERROR 日志 -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY </onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${log_path}%d{yyyyMMdd}/%d{HH}/log-error.%i${log_suffix}</FileNamePattern>
            <MaxHistory>${maxHistory}</MaxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${maxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>

    <!--连接数据库配置-->
    <!--    <appender name="db_classic_mysql_pool" class="ch.qos.logback.classic.db.DBAppender">-->
    <!--        <connectionSource class="ch.qos.logback.core.db.DataSourceConnectionSource">-->
    <!--            <dataSource class="com.alibaba.druid.pool.DruidDataSource">-->
    <!--                <driverClassName>com.mysql.jdbc.Driver</driverClassName>-->
    <!--                <url>jdbc:mysql://127.0.0.1:3306/web-db?serverTimezone=Asia/Shanghai</url>-->
    <!--                <username>root</username>-->
    <!--                <password>root</password>-->
    <!--            </dataSource>-->
    <!--        </connectionSource>-->
    <!--    </appender>-->

    <root level="INFO">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="DEBUG_FILE"/>
        <appender-ref ref="INFO_FILE"/>
        <appender-ref ref="WARN_FILE"/>
        <appender-ref ref="ERROR_FILE"/>
        <!--        <appender-ref ref="db_classic_mysql_pool"/>-->
    </root>

    <!--
      logger主要用于存放日志对象，也可以定义日志类型、级别
      name：表示匹配的logger类型前缀，也就是包的前半部分
      level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
      additivity：作用在于children-logger 是否使用 rootLogger 配置的appender进行输出，
          false：表示只用当前logger的appender-ref 有效,rootLogger 无效。（输入到文件，但不输出控制台）
          true： 表示当前logger的 appender-ref 和 rootLogger 的appender-ref都有效 （输入到文件，并在控制台打印）
      -->
    <logger name="com.mer.common.Interceptor.MybatisInterceptor" level="DEBUG" additivity="false">
        <appender-ref ref="DEBUG_FILE" />
    </logger>


</configuration>